// Code generated by goa v2.0.5, DO NOT EDIT.
//
// another_secured_service gRPC server
//
// Command:
// $ goa gen github.com/goadesign/examples/security/design

package server

import (
	"context"

	anothersecuredservice "github.com/goadesign/examples/security/gen/another_secured_service"
	another_secured_servicepb "github.com/goadesign/examples/security/gen/grpc/another_secured_service/pb"
	"goa.design/goa"
	goagrpc "goa.design/goa/grpc"
	"google.golang.org/grpc/codes"
)

// Server implements the another_secured_servicepb.AnotherSecuredServiceServer
// interface.
type Server struct {
	SigninH           goagrpc.UnaryHandler
	SecureH           goagrpc.UnaryHandler
	DoublySecureH     goagrpc.UnaryHandler
	AlsoDoublySecureH goagrpc.UnaryHandler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// New instantiates the server struct with the another_secured_service service
// endpoints.
func New(e *anothersecuredservice.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		SigninH:           NewSigninHandler(e.Signin, uh),
		SecureH:           NewSecureHandler(e.Secure, uh),
		DoublySecureH:     NewDoublySecureHandler(e.DoublySecure, uh),
		AlsoDoublySecureH: NewAlsoDoublySecureHandler(e.AlsoDoublySecure, uh),
	}
}

// NewSigninHandler creates a gRPC handler which serves the
// "another_secured_service" service "signin" endpoint.
func NewSigninHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeSigninRequest, EncodeSigninResponse)
	}
	return h
}

// Signin implements the "Signin" method in
// another_secured_servicepb.AnotherSecuredServiceServer interface.
func (s *Server) Signin(ctx context.Context, message *another_secured_servicepb.SigninRequest) (*another_secured_servicepb.SigninResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "signin")
	ctx = context.WithValue(ctx, goa.ServiceKey, "another_secured_service")
	resp, err := s.SigninH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "unauthorized":
				return nil, goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*another_secured_servicepb.SigninResponse), nil
}

// NewSecureHandler creates a gRPC handler which serves the
// "another_secured_service" service "secure" endpoint.
func NewSecureHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeSecureRequest, EncodeSecureResponse)
	}
	return h
}

// Secure implements the "Secure" method in
// another_secured_servicepb.AnotherSecuredServiceServer interface.
func (s *Server) Secure(ctx context.Context, message *another_secured_servicepb.SecureRequest) (*another_secured_servicepb.SecureResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "secure")
	ctx = context.WithValue(ctx, goa.ServiceKey, "another_secured_service")
	resp, err := s.SecureH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "invalid-scopes":
				return nil, goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			case "unauthorized":
				return nil, goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*another_secured_servicepb.SecureResponse), nil
}

// NewDoublySecureHandler creates a gRPC handler which serves the
// "another_secured_service" service "doubly_secure" endpoint.
func NewDoublySecureHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeDoublySecureRequest, EncodeDoublySecureResponse)
	}
	return h
}

// DoublySecure implements the "DoublySecure" method in
// another_secured_servicepb.AnotherSecuredServiceServer interface.
func (s *Server) DoublySecure(ctx context.Context, message *another_secured_servicepb.DoublySecureRequest) (*another_secured_servicepb.DoublySecureResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "doubly_secure")
	ctx = context.WithValue(ctx, goa.ServiceKey, "another_secured_service")
	resp, err := s.DoublySecureH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "invalid-scopes":
				return nil, goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			case "unauthorized":
				return nil, goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*another_secured_servicepb.DoublySecureResponse), nil
}

// NewAlsoDoublySecureHandler creates a gRPC handler which serves the
// "another_secured_service" service "also_doubly_secure" endpoint.
func NewAlsoDoublySecureHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeAlsoDoublySecureRequest, EncodeAlsoDoublySecureResponse)
	}
	return h
}

// AlsoDoublySecure implements the "AlsoDoublySecure" method in
// another_secured_servicepb.AnotherSecuredServiceServer interface.
func (s *Server) AlsoDoublySecure(ctx context.Context, message *another_secured_servicepb.AlsoDoublySecureRequest) (*another_secured_servicepb.AlsoDoublySecureResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "also_doubly_secure")
	ctx = context.WithValue(ctx, goa.ServiceKey, "another_secured_service")
	resp, err := s.AlsoDoublySecureH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "invalid-scopes":
				return nil, goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			case "unauthorized":
				return nil, goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*another_secured_servicepb.AlsoDoublySecureResponse), nil
}
