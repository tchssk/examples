// Code generated by goa v2.0.5, DO NOT EDIT.
//
// another_secured_service gRPC client encoders and decoders
//
// Command:
// $ goa gen github.com/goadesign/examples/security/design

package client

import (
	"context"

	anothersecuredservice "github.com/goadesign/examples/security/gen/another_secured_service"
	another_secured_servicepb "github.com/goadesign/examples/security/gen/grpc/another_secured_service/pb"
	goagrpc "goa.design/goa/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildSigninFunc builds the remote method to invoke for
// "another_secured_service" service "signin" endpoint.
func BuildSigninFunc(grpccli another_secured_servicepb.AnotherSecuredServiceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Signin(ctx, reqpb.(*another_secured_servicepb.SigninRequest), opts...)
		}
		return grpccli.Signin(ctx, &another_secured_servicepb.SigninRequest{}, opts...)
	}
}

// EncodeSigninRequest encodes requests sent to another_secured_service signin
// endpoint.
func EncodeSigninRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*anothersecuredservice.SigninPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("another_secured_service", "signin", "*anothersecuredservice.SigninPayload", v)
	}
	(*md).Append("username", payload.Username)
	(*md).Append("password", payload.Password)
	return NewSigninRequest(), nil
}

// DecodeSigninResponse decodes responses from the another_secured_service
// signin endpoint.
func DecodeSigninResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*another_secured_servicepb.SigninResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("another_secured_service", "signin", "*another_secured_servicepb.SigninResponse", v)
	}
	res := NewSigninResult(message)
	return res, nil
}

// BuildSecureFunc builds the remote method to invoke for
// "another_secured_service" service "secure" endpoint.
func BuildSecureFunc(grpccli another_secured_servicepb.AnotherSecuredServiceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Secure(ctx, reqpb.(*another_secured_servicepb.SecureRequest), opts...)
		}
		return grpccli.Secure(ctx, &another_secured_servicepb.SecureRequest{}, opts...)
	}
}

// EncodeSecureRequest encodes requests sent to another_secured_service secure
// endpoint.
func EncodeSecureRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*anothersecuredservice.SecurePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("another_secured_service", "secure", "*anothersecuredservice.SecurePayload", v)
	}
	(*md).Append("authorization", payload.Token)
	return NewSecureRequest(payload), nil
}

// DecodeSecureResponse decodes responses from the another_secured_service
// secure endpoint.
func DecodeSecureResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*another_secured_servicepb.SecureResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("another_secured_service", "secure", "*another_secured_servicepb.SecureResponse", v)
	}
	res := NewSecureResult(message)
	return res, nil
}

// BuildDoublySecureFunc builds the remote method to invoke for
// "another_secured_service" service "doubly_secure" endpoint.
func BuildDoublySecureFunc(grpccli another_secured_servicepb.AnotherSecuredServiceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.DoublySecure(ctx, reqpb.(*another_secured_servicepb.DoublySecureRequest), opts...)
		}
		return grpccli.DoublySecure(ctx, &another_secured_servicepb.DoublySecureRequest{}, opts...)
	}
}

// EncodeDoublySecureRequest encodes requests sent to another_secured_service
// doubly_secure endpoint.
func EncodeDoublySecureRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*anothersecuredservice.DoublySecurePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("another_secured_service", "doubly_secure", "*anothersecuredservice.DoublySecurePayload", v)
	}
	(*md).Append("authorization", payload.Token)
	return NewDoublySecureRequest(payload), nil
}

// DecodeDoublySecureResponse decodes responses from the
// another_secured_service doubly_secure endpoint.
func DecodeDoublySecureResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*another_secured_servicepb.DoublySecureResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("another_secured_service", "doubly_secure", "*another_secured_servicepb.DoublySecureResponse", v)
	}
	res := NewDoublySecureResult(message)
	return res, nil
}

// BuildAlsoDoublySecureFunc builds the remote method to invoke for
// "another_secured_service" service "also_doubly_secure" endpoint.
func BuildAlsoDoublySecureFunc(grpccli another_secured_servicepb.AnotherSecuredServiceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.AlsoDoublySecure(ctx, reqpb.(*another_secured_servicepb.AlsoDoublySecureRequest), opts...)
		}
		return grpccli.AlsoDoublySecure(ctx, &another_secured_servicepb.AlsoDoublySecureRequest{}, opts...)
	}
}

// EncodeAlsoDoublySecureRequest encodes requests sent to
// another_secured_service also_doubly_secure endpoint.
func EncodeAlsoDoublySecureRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*anothersecuredservice.AlsoDoublySecurePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("another_secured_service", "also_doubly_secure", "*anothersecuredservice.AlsoDoublySecurePayload", v)
	}
	if payload.OauthToken != nil {
		(*md).Append("oauth", *payload.OauthToken)
	}
	if payload.Token != nil {
		(*md).Append("authorization", *payload.Token)
	}
	return NewAlsoDoublySecureRequest(payload), nil
}

// DecodeAlsoDoublySecureResponse decodes responses from the
// another_secured_service also_doubly_secure endpoint.
func DecodeAlsoDoublySecureResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*another_secured_servicepb.AlsoDoublySecureResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("another_secured_service", "also_doubly_secure", "*another_secured_servicepb.AlsoDoublySecureResponse", v)
	}
	res := NewAlsoDoublySecureResult(message)
	return res, nil
}
