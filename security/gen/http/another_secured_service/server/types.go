// Code generated by goa v2.0.5, DO NOT EDIT.
//
// another_secured_service HTTP server types
//
// Command:
// $ goa gen github.com/goadesign/examples/security/design

package server

import (
	anothersecuredservice "github.com/goadesign/examples/security/gen/another_secured_service"
)

// SigninResponseBody is the type of the "another_secured_service" service
// "signin" endpoint HTTP response body.
type SigninResponseBody struct {
	// JWT token
	JWT string `form:"jwt" json:"jwt" xml:"jwt"`
	// API Key
	APIKey string `form:"api_key" json:"api_key" xml:"api_key"`
	// OAuth2 token
	OauthToken string `form:"oauth_token" json:"oauth_token" xml:"oauth_token"`
}

// SigninUnauthorizedResponseBody is the type of the "another_secured_service"
// service "signin" endpoint HTTP response body for the "unauthorized" error.
type SigninUnauthorizedResponseBody string

// SecureInvalidScopesResponseBody is the type of the "another_secured_service"
// service "secure" endpoint HTTP response body for the "invalid-scopes" error.
type SecureInvalidScopesResponseBody string

// SecureUnauthorizedResponseBody is the type of the "another_secured_service"
// service "secure" endpoint HTTP response body for the "unauthorized" error.
type SecureUnauthorizedResponseBody string

// DoublySecureInvalidScopesResponseBody is the type of the
// "another_secured_service" service "doubly_secure" endpoint HTTP response
// body for the "invalid-scopes" error.
type DoublySecureInvalidScopesResponseBody string

// DoublySecureUnauthorizedResponseBody is the type of the
// "another_secured_service" service "doubly_secure" endpoint HTTP response
// body for the "unauthorized" error.
type DoublySecureUnauthorizedResponseBody string

// AlsoDoublySecureInvalidScopesResponseBody is the type of the
// "another_secured_service" service "also_doubly_secure" endpoint HTTP
// response body for the "invalid-scopes" error.
type AlsoDoublySecureInvalidScopesResponseBody string

// AlsoDoublySecureUnauthorizedResponseBody is the type of the
// "another_secured_service" service "also_doubly_secure" endpoint HTTP
// response body for the "unauthorized" error.
type AlsoDoublySecureUnauthorizedResponseBody string

// NewSigninResponseBody builds the HTTP response body from the result of the
// "signin" endpoint of the "another_secured_service" service.
func NewSigninResponseBody(res *anothersecuredservice.Creds) *SigninResponseBody {
	body := &SigninResponseBody{
		JWT:        res.JWT,
		APIKey:     res.APIKey,
		OauthToken: res.OauthToken,
	}
	return body
}

// NewSigninUnauthorizedResponseBody builds the HTTP response body from the
// result of the "signin" endpoint of the "another_secured_service" service.
func NewSigninUnauthorizedResponseBody(res anothersecuredservice.Unauthorized) SigninUnauthorizedResponseBody {
	body := SigninUnauthorizedResponseBody(res)
	return body
}

// NewSecureInvalidScopesResponseBody builds the HTTP response body from the
// result of the "secure" endpoint of the "another_secured_service" service.
func NewSecureInvalidScopesResponseBody(res anothersecuredservice.InvalidScopes) SecureInvalidScopesResponseBody {
	body := SecureInvalidScopesResponseBody(res)
	return body
}

// NewSecureUnauthorizedResponseBody builds the HTTP response body from the
// result of the "secure" endpoint of the "another_secured_service" service.
func NewSecureUnauthorizedResponseBody(res anothersecuredservice.Unauthorized) SecureUnauthorizedResponseBody {
	body := SecureUnauthorizedResponseBody(res)
	return body
}

// NewDoublySecureInvalidScopesResponseBody builds the HTTP response body from
// the result of the "doubly_secure" endpoint of the "another_secured_service"
// service.
func NewDoublySecureInvalidScopesResponseBody(res anothersecuredservice.InvalidScopes) DoublySecureInvalidScopesResponseBody {
	body := DoublySecureInvalidScopesResponseBody(res)
	return body
}

// NewDoublySecureUnauthorizedResponseBody builds the HTTP response body from
// the result of the "doubly_secure" endpoint of the "another_secured_service"
// service.
func NewDoublySecureUnauthorizedResponseBody(res anothersecuredservice.Unauthorized) DoublySecureUnauthorizedResponseBody {
	body := DoublySecureUnauthorizedResponseBody(res)
	return body
}

// NewAlsoDoublySecureInvalidScopesResponseBody builds the HTTP response body
// from the result of the "also_doubly_secure" endpoint of the
// "another_secured_service" service.
func NewAlsoDoublySecureInvalidScopesResponseBody(res anothersecuredservice.InvalidScopes) AlsoDoublySecureInvalidScopesResponseBody {
	body := AlsoDoublySecureInvalidScopesResponseBody(res)
	return body
}

// NewAlsoDoublySecureUnauthorizedResponseBody builds the HTTP response body
// from the result of the "also_doubly_secure" endpoint of the
// "another_secured_service" service.
func NewAlsoDoublySecureUnauthorizedResponseBody(res anothersecuredservice.Unauthorized) AlsoDoublySecureUnauthorizedResponseBody {
	body := AlsoDoublySecureUnauthorizedResponseBody(res)
	return body
}

// NewSigninPayload builds a another_secured_service service signin endpoint
// payload.
func NewSigninPayload() *anothersecuredservice.SigninPayload {
	return &anothersecuredservice.SigninPayload{}
}

// NewSecurePayload builds a another_secured_service service secure endpoint
// payload.
func NewSecurePayload(fail *bool, token string) *anothersecuredservice.SecurePayload {
	return &anothersecuredservice.SecurePayload{
		Fail:  fail,
		Token: token,
	}
}

// NewDoublySecurePayload builds a another_secured_service service
// doubly_secure endpoint payload.
func NewDoublySecurePayload(key string, token string) *anothersecuredservice.DoublySecurePayload {
	return &anothersecuredservice.DoublySecurePayload{
		Key:   key,
		Token: token,
	}
}

// NewAlsoDoublySecurePayload builds a another_secured_service service
// also_doubly_secure endpoint payload.
func NewAlsoDoublySecurePayload(key *string, oauthToken *string, token *string) *anothersecuredservice.AlsoDoublySecurePayload {
	return &anothersecuredservice.AlsoDoublySecurePayload{
		Key:        key,
		OauthToken: oauthToken,
		Token:      token,
	}
}
