// Code generated by goa v2.0.5, DO NOT EDIT.
//
// another_secured_service HTTP client CLI support package
//
// Command:
// $ goa gen github.com/goadesign/examples/security/design

package client

import (
	"fmt"
	"strconv"

	anothersecuredservice "github.com/goadesign/examples/security/gen/another_secured_service"
)

// BuildSigninPayload builds the payload for the another_secured_service signin
// endpoint from CLI flags.
func BuildSigninPayload(anotherSecuredServiceSigninUsername string, anotherSecuredServiceSigninPassword string) (*anothersecuredservice.SigninPayload, error) {
	var username string
	{
		username = anotherSecuredServiceSigninUsername
	}
	var password string
	{
		password = anotherSecuredServiceSigninPassword
	}
	payload := &anothersecuredservice.SigninPayload{
		Username: username,
		Password: password,
	}
	return payload, nil
}

// BuildSecurePayload builds the payload for the another_secured_service secure
// endpoint from CLI flags.
func BuildSecurePayload(anotherSecuredServiceSecureFail string, anotherSecuredServiceSecureToken string) (*anothersecuredservice.SecurePayload, error) {
	var err error
	var fail *bool
	{
		if anotherSecuredServiceSecureFail != "" {
			var val bool
			val, err = strconv.ParseBool(anotherSecuredServiceSecureFail)
			fail = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for fail, must be BOOL")
			}
		}
	}
	var token string
	{
		token = anotherSecuredServiceSecureToken
	}
	payload := &anothersecuredservice.SecurePayload{
		Fail:  fail,
		Token: token,
	}
	return payload, nil
}

// BuildDoublySecurePayload builds the payload for the another_secured_service
// doubly_secure endpoint from CLI flags.
func BuildDoublySecurePayload(anotherSecuredServiceDoublySecureKey string, anotherSecuredServiceDoublySecureToken string) (*anothersecuredservice.DoublySecurePayload, error) {
	var key string
	{
		key = anotherSecuredServiceDoublySecureKey
	}
	var token string
	{
		token = anotherSecuredServiceDoublySecureToken
	}
	payload := &anothersecuredservice.DoublySecurePayload{
		Key:   key,
		Token: token,
	}
	return payload, nil
}

// BuildAlsoDoublySecurePayload builds the payload for the
// another_secured_service also_doubly_secure endpoint from CLI flags.
func BuildAlsoDoublySecurePayload(anotherSecuredServiceAlsoDoublySecureKey string, anotherSecuredServiceAlsoDoublySecureOauthToken string, anotherSecuredServiceAlsoDoublySecureToken string, anotherSecuredServiceAlsoDoublySecureUsername string, anotherSecuredServiceAlsoDoublySecurePassword string) (*anothersecuredservice.AlsoDoublySecurePayload, error) {
	var key *string
	{
		if anotherSecuredServiceAlsoDoublySecureKey != "" {
			key = &anotherSecuredServiceAlsoDoublySecureKey
		}
	}
	var oauthToken *string
	{
		if anotherSecuredServiceAlsoDoublySecureOauthToken != "" {
			oauthToken = &anotherSecuredServiceAlsoDoublySecureOauthToken
		}
	}
	var token *string
	{
		if anotherSecuredServiceAlsoDoublySecureToken != "" {
			token = &anotherSecuredServiceAlsoDoublySecureToken
		}
	}
	var username *string
	{
		if anotherSecuredServiceAlsoDoublySecureUsername != "" {
			username = &anotherSecuredServiceAlsoDoublySecureUsername
		}
	}
	var password *string
	{
		if anotherSecuredServiceAlsoDoublySecurePassword != "" {
			password = &anotherSecuredServiceAlsoDoublySecurePassword
		}
	}
	payload := &anothersecuredservice.AlsoDoublySecurePayload{
		Key:        key,
		OauthToken: oauthToken,
		Token:      token,
		Username:   username,
		Password:   password,
	}
	return payload, nil
}
