// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "survey": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/goadesign/examples/form_encoding/design
// --out=$(GOPATH)/src/github.com/goadesign/examples/form_encoding
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/encoding/form"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(form.NewEncoder, "application/x-www-form-urlencoded")
	service.Decoder.Register(form.NewDecoder, "application/x-www-form-urlencoded")

	// Setup default encoder and decoder
	service.Encoder.Register(form.NewEncoder, "*/*")
	service.Decoder.Register(form.NewDecoder, "*/*")
}

// SurveyFormController is the controller interface for the SurveyForm actions.
type SurveyFormController interface {
	goa.Muxer
	Submit(*SubmitSurveyFormContext) error
}

// MountSurveyFormController "mounts" a SurveyForm resource controller on the given service.
func MountSurveyFormController(service *goa.Service, ctrl SurveyFormController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSubmitSurveyFormContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*YesNoPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Submit(rctx)
	}
	service.Mux.Handle("POST", "/survey/", ctrl.MuxHandler("submit", h, unmarshalSubmitSurveyFormPayload))
	service.LogInfo("mount", "ctrl", "SurveyForm", "action", "Submit", "route", "POST /survey/")
}

// unmarshalSubmitSurveyFormPayload unmarshals the request body into the context request data Payload field.
func unmarshalSubmitSurveyFormPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &yesNoPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
